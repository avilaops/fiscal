name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  lint:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements_dev.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install -r requirements_dev.txt

    - name: Check code formatting (Black)
      run: black --check .

    - name: Check import sorting (isort)
      run: isort --check-only .

    - name: Lint with Flake8
      run: flake8 .

    - name: Security check with Bandit
      run: bandit -r core/ api/ -ll
      continue-on-error: true

  test:
    name: Run Tests
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: test_fiscal_db
          MYSQL_ROOT_PASSWORD: root_pass
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_pass
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
        ports:
          - 3306:3306

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install coverage pytest pytest-django

    - name: Wait for MySQL
      run: |
        until nc -z -v -w30 localhost 3306; do
          echo "Waiting for MySQL..."
          sleep 5
        done

    - name: Run migrations
      env:
        DJANGO_SECRET_KEY: test-secret-key
        DB_NAME: test_fiscal_db
        DB_USER: test_user
        DB_PASS: test_pass
        DB_HOST: localhost
        DB_PORT: 3306
      run: python manage.py migrate

    - name: Run tests with coverage
      env:
        DJANGO_SECRET_KEY: test-secret-key
        DB_NAME: test_fiscal_db
        DB_USER: test_user
        DB_PASS: test_pass
        DB_HOST: localhost
        DB_PORT: 3306
      run: |
        coverage run --source='.' manage.py test
        coverage report
        coverage xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build Docker image
      run: docker build -t fiscal-web-app:${{ github.sha }} .

    - name: Test Docker image
      run: |
        docker run --rm fiscal-web-app:${{ github.sha }} python manage.py check

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install safety
      run: pip install safety

    - name: Check for known vulnerabilities
      run: safety check --file requirements.txt --continue-on-error
      continue-on-error: true
